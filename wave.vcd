$date
	Sun Nov 10 21:44:53 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module pipelined_riscv_tb $end
$var reg 1 ! clock $end
$var reg 1 " reset_pc $end
$scope module uut $end
$var wire 1 ! clock $end
$var wire 1 " reset_pc $end
$var wire 2 # result_src [1:0] $end
$var wire 1 $ reg_write $end
$var wire 7 % opcode [6:0] $end
$var wire 1 & mem_write $end
$var wire 1 ' jump $end
$var wire 2 ( imm_src [1:0] $end
$var wire 7 ) func7 [6:0] $end
$var wire 3 * func3 [2:0] $end
$var wire 1 + branch $end
$var wire 1 , alu_src $end
$var wire 4 - alu_control_id [3:0] $end
$scope module cu $end
$var wire 1 . PCSrc $end
$var wire 1 / Zero $end
$var wire 1 0 funct7b5 $end
$var wire 7 1 op [6:0] $end
$var wire 3 2 funct3 [2:0] $end
$var wire 2 3 ResultSrc [1:0] $end
$var wire 1 $ RegWrite $end
$var wire 1 & MemWrite $end
$var wire 1 ' Jump $end
$var wire 2 4 ImmSrc [1:0] $end
$var wire 1 + Branch $end
$var wire 1 , ALUSrc $end
$var wire 2 5 ALUOp [1:0] $end
$var wire 3 6 ALUControlWire [2:0] $end
$var wire 4 7 ALUControl [3:0] $end
$scope module ad $end
$var wire 1 8 RtypeSub $end
$var wire 1 0 funct7b5 $end
$var wire 1 9 opb5 $end
$var wire 3 : funct3 [2:0] $end
$var wire 2 ; ALUOp [1:0] $end
$var reg 3 < ALUControl [2:0] $end
$upscope $end
$scope module md $end
$var wire 7 = op [6:0] $end
$var wire 2 > ResultSrc [1:0] $end
$var wire 1 $ RegWrite $end
$var wire 1 & MemWrite $end
$var wire 1 ' Jump $end
$var wire 2 ? ImmSrc [1:0] $end
$var wire 1 + Branch $end
$var wire 1 , ALUSrc $end
$var wire 2 @ ALUOp [1:0] $end
$var reg 11 A controls [10:0] $end
$upscope $end
$upscope $end
$scope module fd $end
$var wire 4 B alu_control_id [3:0] $end
$var wire 1 , alu_src $end
$var wire 1 + branch $end
$var wire 1 ! clock $end
$var wire 2 C imm_src [1:0] $end
$var wire 1 ' jump $end
$var wire 1 & mem_write $end
$var wire 1 $ reg_write $end
$var wire 1 " reset_pc $end
$var wire 2 D result_src [1:0] $end
$var wire 64 E write_data_execute [63:0] $end
$var wire 64 F result_to_write [63:0] $end
$var wire 2 G result_src_memory [1:0] $end
$var wire 2 H result_src_execute [1:0] $end
$var wire 2 I result_src_decode [1:0] $end
$var wire 1 J reg_write_memory $end
$var wire 1 K reg_write_execute $end
$var wire 1 L reg_write_decode $end
$var wire 5 M reg_to_write_src [4:0] $end
$var wire 5 N reg_destination_src_decode [4:0] $end
$var wire 64 O read_data_memory [63:0] $end
$var wire 64 P read_data2_decode [63:0] $end
$var wire 64 Q read_data1_decode [63:0] $end
$var wire 64 R pc_target_execute [63:0] $end
$var wire 1 S pc_source_execute $end
$var wire 64 T pc_plus4_execute [63:0] $end
$var wire 64 U pc_next_instruction_fetch [63:0] $end
$var wire 64 V pc_next_instruction_decode [63:0] $end
$var wire 64 W pc_current_instruction_fetch [63:0] $end
$var wire 64 X pc_current_instruction_decode [63:0] $end
$var wire 7 Y opcode [6:0] $end
$var wire 64 Z next_instruction_memory [63:0] $end
$var wire 1 [ mem_write_execute $end
$var wire 1 \ mem_write_decode $end
$var wire 1 ] jump_decode $end
$var wire 32 ^ instruction_fetch [31:0] $end
$var wire 64 _ imm_extended_decode [63:0] $end
$var wire 7 ` func7 [6:0] $end
$var wire 3 a func3 [2:0] $end
$var wire 5 b destination_register_memory [4:0] $end
$var wire 5 c destination_register_execute [4:0] $end
$var wire 1 d branch_decode $end
$var wire 1 e alu_src_decode $end
$var wire 64 f alu_result_memory [63:0] $end
$var wire 64 g alu_result_execute [63:0] $end
$var wire 4 h alu_control_decode [3:0] $end
$scope module d $end
$var wire 4 i alu_control_id [3:0] $end
$var wire 1 , alu_src $end
$var wire 1 + branch $end
$var wire 1 ! clock $end
$var wire 2 j imm_src [1:0] $end
$var wire 1 ' jump $end
$var wire 1 & mem_write $end
$var wire 1 $ reg_write_uc $end
$var wire 2 k result_src [1:0] $end
$var wire 64 l result_to_write [63:0] $end
$var wire 1 J reg_write_memory $end
$var wire 5 m reg_to_write_src [4:0] $end
$var wire 5 n reg_destiny_src_wire [4:0] $end
$var wire 5 o reg2_src_wire [4:0] $end
$var wire 5 p reg1_src_wire [4:0] $end
$var wire 64 q read_data_reg2_wire [63:0] $end
$var wire 64 r read_data_reg1_wire [63:0] $end
$var wire 7 s opcode [6:0] $end
$var wire 64 t imm_extended_wire [63:0] $end
$var wire 7 u func7 [6:0] $end
$var wire 3 v func3 [2:0] $end
$var wire 32 w current_instruction [31:0] $end
$var wire 64 x addr_next_instruction [63:0] $end
$var wire 64 y addr_current_instruction [63:0] $end
$var reg 64 z addr_current_instruction_dec [63:0] $end
$var reg 64 { addr_next_instruction_dec [63:0] $end
$var reg 4 | alu_control_id_dec [3:0] $end
$var reg 1 e alu_src_dec $end
$var reg 1 d branch_dec $end
$var reg 64 } imm_extended [63:0] $end
$var reg 1 ] jump_dec $end
$var reg 1 \ mem_write_dec $end
$var reg 64 ~ read_data1 [63:0] $end
$var reg 64 !" read_data2 [63:0] $end
$var reg 5 "" reg1_src [4:0] $end
$var reg 5 #" reg2_src [4:0] $end
$var reg 5 $" reg_destiny_src [4:0] $end
$var reg 1 L reg_write_dec $end
$var reg 2 %" result_src_dec [1:0] $end
$scope module imm_gen $end
$var wire 1 &" wire1 $end
$var wire 1 '" wire2 $end
$var wire 1 (" wire3 $end
$var wire 1 )" wire4 $end
$var wire 1 *" wire5 $end
$var wire 1 +" wire6 $end
$var wire 3 ," type [2:0] $end
$var wire 32 -" signU [31:0] $end
$var wire 43 ." signJ [42:0] $end
$var wire 51 /" sign [50:0] $end
$var wire 64 0" resAddSub [63:0] $end
$var wire 1 1" overflow $end
$var wire 64 2" mux4 [63:0] $end
$var wire 32 3" instruction [31:0] $end
$var wire 64 4" immediate [63:0] $end
$var wire 20 5" UTypeImmediate [19:0] $end
$var wire 12 6" SWTypeImmediate [11:0] $end
$var wire 20 7" JTypeImmediate [19:0] $end
$var wire 12 8" JALRTypeImmediate [11:0] $end
$var wire 12 9" ITypeImmediate [11:0] $end
$var wire 12 :" BTypeImmediate [11:0] $end
$upscope $end
$scope module register_file $end
$var wire 1 ! clk $end
$var wire 64 ;" readData1 [63:0] $end
$var wire 64 <" readData2 [63:0] $end
$var wire 5 =" readRegister1 [4:0] $end
$var wire 5 >" readRegister2 [4:0] $end
$var wire 5 ?" writeRegister [4:0] $end
$var wire 64 @" writeData [63:0] $end
$var wire 1 J regWrite $end
$var reg 32 A" write_enabler [31:0] $end
$var integer 32 B" i [31:0] $end
$upscope $end
$upscope $end
$scope module e $end
$var wire 4 C" alu_control [3:0] $end
$var wire 1 e alu_src $end
$var wire 1 D" and_out $end
$var wire 1 d branch $end
$var wire 1 ! clock $end
$var wire 5 E" destination_register_d [4:0] $end
$var wire 64 F" immediate_extended [63:0] $end
$var wire 1 ] jump $end
$var wire 1 \ mem_write_d $end
$var wire 64 G" pc [63:0] $end
$var wire 64 H" pc_plus4_d [63:0] $end
$var wire 1 S pc_source $end
$var wire 64 I" read_data1 [63:0] $end
$var wire 64 J" read_data2 [63:0] $end
$var wire 1 L reg_write_d $end
$var wire 2 K" result_src_d [1:0] $end
$var wire 1 L" zero $end
$var wire 64 M" src_b [63:0] $end
$var wire 64 N" pc_target [63:0] $end
$var wire 64 O" alu_out [63:0] $end
$var reg 64 P" alu_result [63:0] $end
$var reg 5 Q" destination_register_e [4:0] $end
$var reg 1 [ mem_write_e $end
$var reg 64 R" pc_plus4_e [63:0] $end
$var reg 1 K reg_write_e $end
$var reg 2 S" result_src_e [1:0] $end
$var reg 64 T" write_data [63:0] $end
$scope module ALU $end
$var wire 64 U" A [63:0] $end
$var wire 4 V" ALUOp [3:0] $end
$var wire 64 W" B [63:0] $end
$var wire 1 X" equal $end
$var wire 1 Y" greater_or_equal $end
$var wire 1 Z" isSub $end
$var wire 1 [" not_equal $end
$var wire 1 \" unsigned_greater_equal $end
$var wire 1 ]" wire1 $end
$var wire 1 ^" wire2 $end
$var wire 1 _" wire3 $end
$var wire 1 `" wire4 $end
$var wire 1 a" unsigned_lesser $end
$var wire 64 b" result [63:0] $end
$var wire 64 c" resXor [63:0] $end
$var wire 32 d" resSubW [31:0] $end
$var wire 32 e" resShiftRightLogicalW [31:0] $end
$var wire 64 f" resShiftRightLogical [63:0] $end
$var wire 32 g" resShiftRightArithW [31:0] $end
$var wire 64 h" resShiftRightArith [63:0] $end
$var wire 32 i" resShiftLeftLogicalW [31:0] $end
$var wire 64 j" resShiftLeftLogical [63:0] $end
$var wire 64 k" resSLTU [63:0] $end
$var wire 64 l" resSLT [63:0] $end
$var wire 64 m" resOr [63:0] $end
$var wire 64 n" resAnd [63:0] $end
$var wire 32 o" resAddW [31:0] $end
$var wire 64 p" resAddSub [63:0] $end
$var wire 1 q" overflow $end
$var wire 32 r" lowerB [31:0] $end
$var wire 32 s" lowerA [31:0] $end
$var wire 1 t" lesser_than $end
$upscope $end
$upscope $end
$scope module f $end
$var wire 1 S branch $end
$var wire 1 ! clock $end
$var wire 64 u" pc_target [63:0] $end
$var wire 1 " reset_pc $end
$var wire 32 v" read_data [31:0] $end
$var wire 64 w" program_counter_mux [63:0] $end
$var wire 64 x" next_instruction_wire [63:0] $end
$var reg 32 y" instruction [31:0] $end
$var reg 64 z" pc_current_instruction [63:0] $end
$var reg 64 {" pc_next_instruction [63:0] $end
$var reg 64 |" program_counter [63:0] $end
$scope module inst_mem $end
$var wire 11 }" address [10:0] $end
$var wire 32 ~" read_data [31:0] $end
$upscope $end
$upscope $end
$scope module m $end
$var wire 64 !# alu_result_m [63:0] $end
$var wire 1 ! clock $end
$var wire 1 [ mem_write $end
$var wire 64 "# next_instruction_m [63:0] $end
$var wire 5 ## rd_m [4:0] $end
$var wire 1 K reg_write_m $end
$var wire 2 $# result_src_m [1:0] $end
$var wire 64 %# write_data_m [63:0] $end
$var wire 64 &# mem_data_wire [63:0] $end
$var reg 64 '# alu_result [63:0] $end
$var reg 64 (# mem_data [63:0] $end
$var reg 64 )# next_instruction [63:0] $end
$var reg 5 *# rd [4:0] $end
$var reg 1 J reg_write $end
$var reg 2 +# result_src [1:0] $end
$scope module data_mem $end
$var wire 1 ! clk $end
$var wire 64 ,# endereco [63:0] $end
$var wire 1 -# mem_read $end
$var wire 1 [ mem_write $end
$var wire 64 .# write_data [63:0] $end
$var wire 64 /# read_data [63:0] $end
$upscope $end
$upscope $end
$scope module wb $end
$var wire 64 0# alu_result_w [63:0] $end
$var wire 64 1# mem_data_w [63:0] $end
$var wire 64 2# next_instruction_w [63:0] $end
$var wire 5 3# rd [4:0] $end
$var wire 5 4# rd_w [4:0] $end
$var wire 2 5# result_src [1:0] $end
$var wire 64 6# result_write_back [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 6#
bx 5#
bx 4#
bx 3#
bx 2#
bx 1#
bx 0#
bx /#
bx .#
1-#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
xt"
bx s"
bx r"
xq"
bx p"
bx o"
bx n"
bx m"
b0x l"
b0x k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
xL"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
xD"
bx C"
bx B"
b0 A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
x1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
x+"
x*"
x)"
x("
x'"
x&"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
b0xxx i
bx h
bx g
bx f
xe
xd
bx c
bx b
bx a
bx `
bx _
bx ^
x]
x\
x[
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
xS
bx R
bx Q
bx P
bx O
bx N
bx M
xL
xK
xJ
bx I
bx H
bx G
bx F
bx E
bx D
bx C
b0xxx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
x9
x8
b0xxx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
x0
z/
z.
b0xxx -
x,
x+
bx *
bx )
bx (
x'
x&
bx %
x$
bx #
1"
0!
$end
#5
0`"
b10001100000011 v"
b10001100000011 ~"
b0 }"
b1 x"
b0 |"
b0xxx h
b0xxx |
b0xxx C"
b0xxx V"
1!
#10
0!
#15
bz 2"
b0 t
b0 4"
b0 ,"
0+"
0*"
0)"
0("
0'"
0&"
08
1$
b0 (
b0 4
b0 ?
b0 C
b0 j
1,
0&
b1 #
b1 3
b1 >
b1 D
b1 k
0+
b0 5
b0 ;
b0 @
0'
00
b0 -
b0 7
b0 B
b0 i
b0 6
b0 <
09
b10010010000 A
b0 8"
b10 5"
b1000000000000 7"
b11 :"
b110 6"
b0 9"
b0 -"
b0 ."
b0 /"
b0 )
b0 `
b0 u
b10 *
b10 2
b10 :
b10 a
b10 v
b11 %
b11 1
b11 =
b11 Y
b11 s
b110 n
b0 q
b0 <"
b0 o
b0 >"
b0 r
b0 ;"
b0 p
b0 ="
b1 U
b1 x
b1 {"
b0 W
b0 y
b0 z"
b10001100000011 ^
b10001100000011 w
b10001100000011 3"
b10001100000011 y"
1!
#20
0!
#25
1L"
b0 O"
b0 b"
0["
1X"
1Y"
b0 l"
0t"
0q"
b0 p"
1\"
0Z"
b0 n"
b0 m"
b0 c"
b0 o"
b0 d"
b0 r"
b0 j"
b0 f"
b0 h"
b0 i"
b0 e"
b0 g"
b0 k"
0a"
0]"
0^"
0_"
0S
b1 w"
b0 s"
b0 M"
b0 W"
0D"
b1 V
b1 {
b1 H"
b0 R
b0 N"
b0 u"
b0 _
b0 }
b0 F"
b110 N
b110 $"
b110 E"
b0 #"
b0 ""
b0 X
b0 z
b0 G"
b0 P
b0 !"
b0 J"
b0 Q
b0 ~
b0 I"
b0 U"
1e
b0 h
b0 |
b0 C"
b0 V"
0d
0]
0\
b1 I
b1 %"
b1 K"
1L
1!
#30
0!
#35
b1000 &#
b1000 /#
b0 g
b0 P"
b0 !#
b0 ,#
b1 T
b1 R"
b1 "#
b110 c
b110 Q"
b110 ##
b0 E
b0 T"
b0 %#
b0 .#
0[
b1 H
b1 S"
b1 $#
1K
1!
#40
0!
#45
b1000000 A"
b1000 F
b1000 l
b1000 @"
b1000 6#
b100000 B"
b1 G
b1 +#
b1 5#
1J
b1000 O
b1000 (#
b1000 1#
b1 Z
b1 )#
b1 2#
b110 M
b110 m
b110 ?"
b110 3#
b110 b
b110 *#
b110 4#
b0 f
b0 '#
b0 0#
1!
#50
0!
#55
1!
#60
0!
#65
1!
#70
0!
#75
1!
#80
0!
#85
1!
#90
0!
#95
1!
#100
0!
0"
#105
b10 w"
b100000000000010000000100011 v"
b100000000000010000000100011 ~"
b1 }"
b10 x"
b1 |"
1!
#110
0!
#115
b1000000 t
b1000000 4"
b1 ,"
1&"
0$
b1 (
b1 4
b1 ?
b1 C
b1 j
1&
b0 #
b0 3
b0 >
b0 D
b0 k
19
b111000000 A
b1000000 8"
b100000000000010 5"
b1000000100000 7"
b100000 :"
b1000000 6"
b1000000 9"
b10 )
b10 `
b10 u
b100011 %
b100011 1
b100011 =
b100011 Y
b100011 s
b0 n
b11 w"
b11 v"
b11 ~"
b10 }"
b10 U
b10 x
b10 {"
b1 W
b1 y
b1 z"
b100000000000010000000100011 ^
b100000000000010000000100011 w
b100000000000010000000100011 3"
b100000000000010000000100011 y"
b11 x"
b10 |"
1!
#120
0!
#125
0L"
b1000000 O"
b1000000 b"
b0 t
b0 4"
1["
0X"
b1000000 p"
b0 ,"
0&"
1$
b0 (
b0 4
b0 ?
b0 C
b0 j
0&
b1 #
b1 3
b1 >
b1 D
b1 k
0\"
b1000000 m"
b1000000 c"
09
b10010010000 A
b1000000 o"
b11111111111111111111111111000000 d"
b1000000 r"
b1 k"
1a"
b0 8"
b0 5"
b0 7"
b0 :"
b0 6"
b0 9"
b0 )
b0 `
b0 u
b0 *
b0 2
b0 :
b0 a
b0 v
b11 %
b11 1
b11 =
b11 Y
b11 s
b100 w"
b100 v"
b100 ~"
b11 }"
b1000000 M"
b1000000 W"
b11 U
b11 x
b11 {"
b10 W
b10 y
b10 z"
b11 ^
b11 w
b11 3"
b11 y"
b100 x"
b11 |"
b10 V
b10 {
b10 H"
b1000000 _
b1000000 }
b1000000 F"
b0 N
b0 $"
b0 E"
b1000001 R
b1000001 N"
b1000001 u"
b1 X
b1 z
b1 G"
1\
b0 I
b0 %"
b0 K"
0L
1!
#130
0!
#135
1L"
b0 O"
b0 b"
0["
1X"
b0 p"
1\"
b0 m"
b0 c"
x$
bx (
bx 4
bx ?
bx C
bx j
x,
x&
bx #
bx 3
bx >
bx D
bx k
x+
bx 5
bx ;
bx @
x'
b0 o"
b0 d"
b0 r"
b0 k"
0a"
bx A
b0 M"
b0 W"
b100 %
b100 1
b100 =
b100 Y
b100 s
b101 w"
b101 v"
b101 ~"
b100 }"
bx &#
bx /#
b1000000 g
b1000000 P"
b1000000 !#
b1000000 ,#
b10 T
b10 R"
b10 "#
b0 c
b0 Q"
b0 ##
1[
b0 H
b0 S"
b0 $#
0K
b11 V
b11 {
b11 H"
b0 _
b0 }
b0 F"
b10 R
b10 N"
b10 u"
b10 X
b10 z
b10 G"
0\
b1 I
b1 %"
b1 K"
1L
b100 U
b100 x
b100 {"
b11 W
b11 y
b11 z"
b100 ^
b100 w
b100 3"
b100 y"
b101 x"
b100 |"
1!
#140
0!
#145
b0 A"
b101 %
b101 1
b101 =
b101 Y
b101 s
b0x1x w"
b110 v"
b110 ~"
b101 }"
xD"
xS
b1000000 F
b1000000 l
b1000000 @"
b1000000 6#
b100000 B"
b101 U
b101 x
b101 {"
b100 W
b100 y
b100 z"
b101 ^
b101 w
b101 3"
b101 y"
b110 x"
b101 |"
b100 V
b100 {
b100 H"
b11 R
b11 N"
b11 u"
b11 X
b11 z
b11 G"
xe
xd
x]
x\
bx I
bx %"
bx K"
xL
b0 g
b0 P"
b0 !#
b0 ,#
b11 T
b11 R"
b11 "#
0[
b1 H
b1 S"
b1 $#
1K
b1000 &#
b1000 /#
b0 G
b0 +#
b0 5#
0J
bx O
bx (#
bx 1#
b10 Z
b10 )#
b10 2#
b0 M
b0 m
b0 ?"
b0 3#
b0 b
b0 *#
b0 4#
b1000000 f
b1000000 '#
b1000000 0#
1!
#150
0!
#155
b1 A"
b100000 B"
b1000 F
b1000 l
b1000 @"
b1000 6#
b110 %
b110 1
b110 =
b110 Y
b110 s
bx w"
bx v"
bx ~"
b0x1x }"
b1 G
b1 +#
b1 5#
1J
b1000 O
b1000 (#
b1000 1#
b11 Z
b11 )#
b11 2#
b0 f
b0 '#
b0 0#
b100 T
b100 R"
b100 "#
x[
bx H
bx S"
bx $#
xK
b101 V
b101 {
b101 H"
b100 R
b100 N"
b100 u"
b100 X
b100 z
b100 G"
b110 U
b110 x
b110 {"
b101 W
b101 y
b101 z"
b110 ^
b110 w
b110 3"
b110 y"
bx x"
b0x1x |"
1!
#160
0!
#165
bx t
bx 4"
b0 A"
bx ,"
x+"
x*"
x)"
x("
x'"
x&"
x8
x0
b0xxx -
b0xxx 7
b0xxx B
b0xxx i
bx 6
bx <
x9
bx 8"
bx 5"
bx 7"
bx :"
bx 6"
bx 9"
bx -"
bx ."
bx /"
bx )
bx `
bx u
bx *
bx 2
bx :
bx a
bx v
bx %
bx 1
bx =
bx Y
bx s
bx n
bx q
bx <"
bx o
bx >"
bx r
bx ;"
bx p
bx ="
bx }"
b0xx00 F
b0xx00 l
b0xx00 @"
b0xx00 6#
b100000 B"
bx U
bx x
bx {"
b0x1x W
b0x1x y
b0x1x z"
bx ^
bx w
bx 3"
bx y"
bx |"
b110 V
b110 {
b110 H"
b101 R
b101 N"
b101 u"
b101 X
b101 z
b101 G"
b101 T
b101 R"
b101 "#
bx G
bx +#
bx 5#
xJ
b100 Z
b100 )#
b100 2#
1!
#170
0!
#175
x["
xX"
xq"
xY"
b0x l"
xt"
bx p"
bx n"
xZ"
b0xx0x F
b0xx0x l
b0xx0x @"
b0xx0x 6#
bx r"
x\"
bx m"
bx c"
x]"
x^"
x_"
bx M"
bx W"
bx o"
bx d"
bx g"
bx s"
bx i"
bx e"
b0x k"
xa"
b101 Z
b101 )#
b101 2#
b110 T
b110 R"
b110 "#
bx V
bx {
bx H"
bx _
bx }
bx F"
bx N
bx $"
bx E"
bx #"
bx ""
bx R
bx N"
bx u"
b0x1x X
b0x1x z
b0x1x G"
bx P
bx !"
bx J"
bx j"
bx f"
bx h"
bx Q
bx ~
bx I"
bx U"
b0xxx h
b0xxx |
b0xxx C"
b0xxx V"
bx W
bx y
bx z"
1!
#180
0!
#185
b0xxx0 F
b0xxx0 l
b0xxx0 @"
b0xxx0 6#
bx X
bx z
bx G"
bx T
bx R"
bx "#
bx c
bx Q"
bx ##
bx E
bx T"
bx %#
bx .#
b110 Z
b110 )#
b110 2#
1!
#190
0!
#195
bx F
bx l
bx @"
bx 6#
b100000 B"
bx Z
bx )#
bx 2#
bx M
bx m
bx ?"
bx 3#
bx b
bx *#
bx 4#
1!
#200
0!
#205
1!
#210
0!
#215
1!
#220
0!
#225
1!
#230
0!
#235
1!
#240
0!
#245
1!
#250
0!
#255
1!
#260
0!
#265
1!
#270
0!
#275
1!
#280
0!
#285
1!
#290
0!
#295
1!
#300
0!
#305
1!
#310
0!
#315
1!
#320
0!
#325
1!
#330
0!
#335
1!
#340
0!
#345
1!
#350
0!
#355
1!
#360
0!
#365
1!
#370
0!
#375
1!
#380
0!
#385
1!
#390
0!
#395
1!
#400
0!
#405
1!
#410
0!
#415
1!
#420
0!
#425
1!
#430
0!
#435
1!
#440
0!
#445
1!
#450
0!
#455
1!
#460
0!
#465
1!
#470
0!
#475
1!
#480
0!
#485
1!
#490
0!
#495
1!
#500
0!
#505
1!
#510
0!
#515
1!
#520
0!
#525
1!
#530
0!
#535
1!
#540
0!
#545
1!
#550
0!
#555
1!
#560
0!
#565
1!
#570
0!
#575
1!
#580
0!
#585
1!
#590
0!
#595
1!
#600
0!
#605
1!
#610
0!
#615
1!
#620
0!
#625
1!
#630
0!
#635
1!
#640
0!
#645
1!
#650
0!
#655
1!
#660
0!
#665
1!
#670
0!
#675
1!
#680
0!
#685
1!
#690
0!
#695
1!
#700
0!
#705
1!
#710
0!
#715
1!
#720
0!
#725
1!
#730
0!
#735
1!
#740
0!
#745
1!
#750
0!
#755
1!
#760
0!
#765
1!
#770
0!
#775
1!
#780
0!
#785
1!
#790
0!
#795
1!
#800
0!
#805
1!
#810
0!
#815
1!
#820
0!
#825
1!
#830
0!
#835
1!
#840
0!
#845
1!
#850
0!
#855
1!
#860
0!
#865
1!
#870
0!
#875
1!
#880
0!
#885
1!
#890
0!
#895
1!
#900
0!
#905
1!
#910
0!
#915
1!
#920
0!
#925
1!
#930
0!
#935
1!
#940
0!
#945
1!
#950
0!
#955
1!
#960
0!
#965
1!
#970
0!
#975
1!
#980
0!
#985
1!
#990
0!
#995
1!
#1000
0!
#1005
1!
#1010
0!
#1015
1!
#1020
0!
#1025
1!
#1030
0!
#1035
1!
#1040
0!
#1045
1!
#1050
0!
#1055
1!
#1060
0!
#1065
1!
#1070
0!
#1075
1!
#1080
0!
#1085
1!
#1090
0!
#1095
1!
#1100
0!
#1105
1!
#1110
0!
#1115
1!
#1120
0!
#1125
1!
#1130
0!
#1135
1!
#1140
0!
#1145
1!
#1150
0!
#1155
1!
#1160
0!
#1165
1!
#1170
0!
#1175
1!
#1180
0!
#1185
1!
#1190
0!
#1195
1!
#1200
0!
#1205
1!
#1210
0!
#1215
1!
#1220
0!
#1225
1!
#1230
0!
#1235
1!
#1240
0!
#1245
1!
#1250
0!
#1255
1!
#1260
0!
#1265
1!
#1270
0!
#1275
1!
#1280
0!
#1285
1!
#1290
0!
#1295
1!
#1300
0!
#1305
1!
#1310
0!
#1315
1!
#1320
0!
#1325
1!
#1330
0!
#1335
1!
#1340
0!
#1345
1!
#1350
0!
#1355
1!
#1360
0!
#1365
1!
#1370
0!
#1375
1!
#1380
0!
#1385
1!
#1390
0!
#1395
1!
#1400
0!
#1405
1!
#1410
0!
#1415
1!
#1420
0!
#1425
1!
#1430
0!
#1435
1!
#1440
0!
#1445
1!
#1450
0!
#1455
1!
#1460
0!
#1465
1!
#1470
0!
#1475
1!
#1480
0!
#1485
1!
#1490
0!
#1495
1!
#1500
0!
#1505
1!
#1510
0!
#1515
1!
#1520
0!
#1525
1!
#1530
0!
#1535
1!
#1540
0!
#1545
1!
#1550
0!
#1555
1!
#1560
0!
#1565
1!
#1570
0!
#1575
1!
#1580
0!
#1585
1!
#1590
0!
#1595
1!
#1600
0!
#1605
1!
#1610
0!
#1615
1!
#1620
0!
#1625
1!
#1630
0!
#1635
1!
#1640
0!
#1645
1!
#1650
0!
#1655
1!
#1660
0!
#1665
1!
#1670
0!
#1675
1!
#1680
0!
#1685
1!
#1690
0!
#1695
1!
#1700
0!
#1705
1!
#1710
0!
#1715
1!
#1720
0!
#1725
1!
#1730
0!
#1735
1!
#1740
0!
#1745
1!
#1750
0!
#1755
1!
#1760
0!
#1765
1!
#1770
0!
#1775
1!
#1780
0!
#1785
1!
#1790
0!
#1795
1!
#1800
0!
#1805
1!
#1810
0!
#1815
1!
#1820
0!
#1825
1!
#1830
0!
#1835
1!
#1840
0!
#1845
1!
#1850
0!
#1855
1!
#1860
0!
#1865
1!
#1870
0!
#1875
1!
#1880
0!
#1885
1!
#1890
0!
#1895
1!
#1900
0!
#1905
1!
#1910
0!
#1915
1!
#1920
0!
#1925
1!
#1930
0!
#1935
1!
#1940
0!
#1945
1!
#1950
0!
#1955
1!
#1960
0!
#1965
1!
#1970
0!
#1975
1!
#1980
0!
#1985
1!
#1990
0!
#1995
1!
#2000
0!
#2005
1!
#2010
0!
#2015
1!
#2020
0!
#2025
1!
#2030
0!
#2035
1!
#2040
0!
#2045
1!
#2050
0!
#2055
1!
#2060
0!
#2065
1!
#2070
0!
#2075
1!
#2080
0!
#2085
1!
#2090
0!
#2095
1!
#2100
0!
